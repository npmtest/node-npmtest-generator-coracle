{"/home/travis/build/npmtest/node-npmtest-generator-coracle/test.js":"/* istanbul instrument in package npmtest_generator_coracle */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-coracle/lib.npmtest_generator_coracle.js":"/* istanbul instrument in package npmtest_generator_coracle */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_generator_coracle = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_generator_coracle = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-coracle/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-generator-coracle && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_generator_coracle */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_generator_coracle\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_generator_coracle.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_generator_coracle.rollup.js'] =\n            local.assetsDict['/assets.npmtest_generator_coracle.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_generator_coracle.__dirname + '/lib.npmtest_generator_coracle.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-coracle/node_modules/generator-coracle/index.js":"","/home/travis/build/npmtest/node-npmtest-generator-coracle/node_modules/generator-coracle/app/templates/config.js":"/**\r\n * Created by renjian on 2015/11/19.\r\n **/\r\n\r\n'use strict';\r\n\r\nmodule.exports = function(config) {\r\n    /*\r\n     * 配置项目模块\r\n     * module : 模块名称\r\n     * name ; xSimple平台功能名称\r\n     * usable ： 是否上传模块\r\n     * */\r\n    config.modules = [\r\n\r\n    ];\r\n    /*\r\n     * 配置xSimple地址和登录信息\r\n     * url:http://test.kingnode.com:10022\r\n     * username: 'admin',\r\n     * passworld: '1'\r\n     * */\r\n    config.url = '';\r\n    config.loginfo = {\r\n        username: '',\r\n        passworld: ''\r\n    };\r\n    /*\r\n    * 配置public目录下js文件是否压缩混淆\r\n    * */\r\n    config.minPublic = false;\r\n\r\n    /*\r\n    * 配置是否自动启动监视文件任务\r\n    * 如果不启用的话，需要修改代码保存后自己使用gulp build命令部署，再去页面手动刷新\r\n    * */\r\n    config.watch = true;\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-generator-coracle/node_modules/generator-coracle/app/templates/gulpfile.js":"/* jshint node: true, strict: true */\r\n'use strict';\r\n\r\n\r\n/*=====================================\r\n =        Default Configuration        =\r\n =====================================*/\r\n\r\n// Please use config.js to override these selectively:\r\nvar directory = {\r\n    src: 'src',\r\n    zip: \"dist\",\r\n    dest: 'app'\r\n};\r\nvar config = {\r\n    modules: [],\r\n    watch : true,\r\n    vendor: {\r\n        js: [\r\n            './' + directory.src + '/**/*.js',\r\n            '!./' + directory.src + '/public/**/*.*'\r\n        ],\r\n\r\n        less: {\r\n            src: [\r\n                './' + directory.src + '/**/*.less',\r\n                '!./' + directory.src + '/public/**/*.*'\r\n            ],\r\n            paths: []\r\n        },\r\n\r\n        css: [\r\n            './' + directory.src + '/**/*.css',\r\n            '!./' + directory.src + '/public/**/*.*'\r\n        ],\r\n\r\n        html: [\r\n            './' + directory.src + '/**/*.html',\r\n            '!./' + directory.src + '/public/**/*.*'\r\n        ],\r\n        public: [\r\n            './' + directory.src + '/public/**/*.*'\r\n        ],\r\n        publicjs: [\r\n            './' + directory.src + '/public/**/*.js'\r\n        ],\r\n        publicWithoutJs: [\r\n            '!./' + directory.src + '/public/**/*.js',\r\n            './' + directory.src + '/public/**/*.*'\r\n        ]\r\n    },\r\n\r\n    jsHintOpt: {\r\n        lookup: './.jshintrc',\r\n\r\n        /*\r\n        是否启用一些警告 false-关闭 true-启用 注释掉默认关闭\r\n        */\r\n        bitwise : false,//禁止使用位操作符\r\n        curly : true,//禁止省略循环和条件语句后的大括号\r\n        eqeqeq : true,//禁止使用\"==\"和\"!=\"，而应该使用\"===\"和\"!==\"\r\n        forin:false,//在所有\"for in\"循环中，必须使用hasOwnPropery过滤掉对象继承来的成员.\r\n        indent: 4,//代码缩进\r\n        latedef: false,//禁止在变量定义之前使用它.\r\n        noempty:true,//不允许代码中出现空的语句块（\"{}\"）\r\n        quotmark: true,//该选项用于统一代码中的引号风格，single 只能使用单引号 double -- 只能使用双引号 true -- 两者任选其一，但不能同时出现.\r\n        undef: false,//禁止使用未定义的变量.\r\n        unused: 'vars',//该选项激活后，对于\"已定义却未使用的变量\"会给出警告，可选的值有三个：vars -- 只检查变量，不检查函数形参；strict -- 检查变量和函数形参；true -- 检查变量和函数形参，但允许这种情况：一个未使用的形参后紧随一个被使用的形参.\r\n        trailing: true,//禁止在代码的末尾出现空白\r\n        maxdepth:3,//设置每个函数中代码块嵌套层级的上限.\r\n        maxstatements : 100,//设置每个函数中语句数量的上限\r\n        maxlen: 160,//设定每行的最大字符长度\r\n\r\n        /*\r\n        是否关闭一些警告 false-启用 true-关闭 注释掉默认启用\r\n        */\r\n        asi : false,//值为false时，如果代码末尾省略了分号，则JSHint会给出警告；值为true时，则不会.\r\n        boss:true,//值为false时，如果预期为条件表达式的地方使用了赋值表达式，则JSHint会给出警告；值为true时，则不会.\r\n        debug: true,//值为false时，如果代码中有debugger语句，则JSHint会给出警告；值为true时，则不会.\r\n        eqnull : true,//值为false时，如果代码中使用\"==\"来比较变量与null，则JSHint会给出警告；值为true时，则不会.\r\n        funcscope : false,//值为false时，如果在控制语句中定义了变量，却在控制语句之外使用变量，则JSHint会给出警告\r\n        sub : true//值为true时，允许用obj['name']和obj.name两种方式访问对象的属性；值为false时，不允许使用obj['name']方式，除非只能使用这种方式访问.\r\n    },\r\n\r\n    server: {\r\n        host: '0.0.0.0',\r\n        port: '8000'\r\n    }\r\n\r\n};\r\n\r\nif (require('fs').existsSync('./config.js')) {\r\n    var configFn = require('./config');\r\n    configFn(config);\r\n}\r\n/*========================================\r\n =            Requiring stuffs            =\r\n ========================================*/\r\n\r\nvar gulp = require('gulp'),\r\n    seq = require('gulp-run-sequence'),\r\n    less = require('gulp-less'),\r\n    connect = require('gulp-connect'),\r\n    uglify = require('gulp-uglify'),\r\n    sourcemaps = require('gulp-sourcemaps'),\r\n    cssmin = require('gulp-cssmin'),\r\n    rimraf = require('gulp-rimraf'),\r\n    rename = require('gulp-rename'),\r\n    jshint = require('gulp-jshint'),\r\n    stylish = require('jshint-stylish'),\r\n    path = require('path'),\r\n    zip = require('gulp-zip'),\r\n    through = require('through2'),\r\n    browserSync = require('browser-sync').create(),\r\n    fs = require('fs'),\r\n    request = require('request'),\r\n    inquirer = require(\"inquirer\");\r\n\r\nvar modelFolders = [],\r\n    JSESSIONID = '',\r\n    data = {},\r\n    upload_modules = [];\r\n\r\n/*================================================\r\n =            Report Errors to Console            =\r\n ================================================*/\r\n\r\ngulp.on('error', function (e) {\r\n    throw(e);\r\n});\r\n\r\n\r\n/*=========================================\r\n =            Clean dest folder            =\r\n =========================================*/\r\n\r\ngulp.task('clean', function (cb) {\r\n    return gulp.src([\r\n            directory.dest\r\n        ], {read: false})\r\n        .pipe(rimraf());\r\n});\r\n\r\n\r\n/*==========================================\r\n =            Start a web server            =\r\n ==========================================*/\r\n\r\ngulp.task('connect', function () {\r\n    if (typeof config.server === 'object') {\r\n        connect.server({\r\n            root: directory.dest,\r\n            host: config.server.host,\r\n            port: config.server.port,\r\n            livereload: true\r\n        });\r\n    } else {\r\n        throw new Error('Connect is not configured');\r\n    }\r\n});\r\n\r\n\r\n/*==============================================================\r\n =            Setup live reloading on source changes            =\r\n ==============================================================*/\r\n\r\ngulp.task('livereload', function () {\r\n    gulp.src(path.join(directory.dest, '**/*.html'), {read: false})\r\n        .pipe(connect.reload());\r\n});\r\n\r\n\r\n/*=================================================\r\n =            Copy public files to dest              =\r\n =================================================*/\r\n\r\ngulp.task('public', function () {\r\n    if (config.minPublic) {\r\n        gulp.src(\r\n            config.vendor.publicjs, {base: directory.src}\r\n            )\r\n            .pipe(sourcemaps.init())\r\n            //.pipe(concat('app.js'))\r\n            .pipe(uglify())\r\n            .pipe(rename({suffix: '.min'}))\r\n            .pipe(sourcemaps.write('.'))\r\n            .pipe(gulp.dest(directory.dest));\r\n        gulp.src(\r\n            config.vendor.publicWithoutJs, {base: directory.src}\r\n            )\r\n            .pipe(gulp.dest(directory.dest));\r\n    } else {\r\n        return gulp.src(config.vendor.public, {base: directory.src})\r\n            .pipe(gulp.dest(directory.dest));\r\n    }\r\n});\r\n\r\n\r\n/*=================================================\r\n =            Copy html files to dest              =\r\n =================================================*/\r\n\r\ngulp.task('html', function () {\r\n    gulp.src(config.vendor.html, {base: directory.src})\r\n        .pipe(gulp.dest(directory.dest));\r\n});\r\n\r\n\r\n/*======================================================================\r\n =            Compile, minify, mobilize less                            =\r\n ======================================================================*/\r\n\r\ngulp.task('less', function () {\r\n    return gulp.src(config.vendor.less.src, {base: directory.src}).pipe(less())\r\n        .pipe(cssmin())\r\n        .pipe(rename({suffix: '.min'}))\r\n        .pipe(gulp.dest(directory.dest));\r\n});\r\n\r\n\r\n/*======================================================================\r\n =            Compile, minify, mobilize css                            =\r\n ======================================================================*/\r\n\r\ngulp.task('css', function () {\r\n    return gulp.src(config.vendor.css, {base: directory.src})\r\n        .pipe(cssmin())\r\n        .pipe(rename({suffix: '.min'}))\r\n        .pipe(gulp.dest(directory.dest));\r\n});\r\n\r\n\r\n/*====================================================================\r\n =            Compile and minify js generating source maps            =\r\n ====================================================================*/\r\n// - Orders ng deps automatically\r\n// - Precompile templates to ng templateCache\r\n\r\ngulp.task('js', ['hint'], function (done) {\r\n    return gulp.src(\r\n        config.vendor.js, {base: directory.src}\r\n        )\r\n        .pipe(sourcemaps.init())\r\n        //.pipe(concat('app.js'))\r\n        .pipe(uglify())\r\n        .pipe(rename({suffix: '.min'}))\r\n        .pipe(sourcemaps.write('.'))\r\n        .pipe(gulp.dest(directory.dest));\r\n});\r\n\r\n\r\n/*====================================================================\r\n =            jsHint            =\r\n ====================================================================*/\r\n\r\ngulp.task('hint', function () {\r\n    return gulp.src(config.vendor.js)\r\n        .pipe(jshint(config.jsHintOpt))\r\n        //.pipe(jshint.reporter('fail'))\r\n        .pipe(jshint.reporter(stylish));\r\n});\r\n\r\n\r\n/*===================================================================\r\n =            Watch for source changes and rebuild/reload            =\r\n ===================================================================*/\r\n\r\ngulp.task('watch', function () {\r\n    if (typeof config.server === 'object') {\r\n        gulp.watch([directory.dest + '/**/*'], ['livereload']);\r\n    }\r\n    gulp.watch([config.vendor.html], ['html']);\r\n    gulp.watch([config.vendor.less.src], ['less']);\r\n    gulp.watch([config.vendor.css], ['css']);\r\n    gulp.watch([config.vendor.js], ['js']);\r\n    gulp.watch([config.vendor.public], ['public']);\r\n});\r\n\r\n\r\n/*===================================================\r\n =            Starts a browser-sync Server                 =\r\n ===================================================*/\r\n\r\ngulp.task('browser-sync', function () {\r\n    browserSync.init({\r\n        proxy: \"localhost:8000\"\r\n    });\r\n});\r\n\r\n\r\n/*======================================\r\n =            Build Sequence            =\r\n ======================================*/\r\n\r\ngulp.task('build', function (done) {\r\n    var tasks = ['js', 'html', 'css', 'public', 'less'];\r\n    seq('clean', tasks, done);\r\n});\r\n\r\n\r\n/*====================================\r\n =            Default Task            =\r\n ====================================*/\r\n\r\ngulp.task('default', function (done) {\r\n    var tasks = [];\r\n\r\n    if (typeof config.server === 'object') {\r\n        tasks.push('connect');\r\n    }\r\n    if(config.watch){\r\n        tasks.push('watch');\r\n    }\r\n    seq('build', tasks, done);\r\n});\r\n\r\n/*====================================\r\n =            clean dist Task            =\r\n ====================================*/\r\n\r\ngulp.task('clean_zip', function () {\r\n    return gulp.src([\r\n            './' + directory.zip\r\n        ], {read: false})\r\n        .pipe(rimraf());\r\n});\r\n\r\n\r\n/*====================================\r\n =            get model Task            =\r\n ====================================*/\r\n\r\ngulp.task('get_model', function () {\r\n    return gulp.src([path.join(directory.dest, '/*')])\r\n        .pipe(through.obj(function (file, enc, cb) {\r\n            modelFolders.push(file.relative);\r\n            cb();\r\n        }));\r\n});\r\n\r\n/*====================================\r\n =             Task            =\r\n ====================================*/\r\n\r\ngulp.task('select_modules',['zip'], function (done) {\r\n    var moduleNames = [];\r\n    for (var i = 0, l = config.modules.length; i < l; i++) {\r\n        if (config.modules[i].usable) {\r\n            moduleNames.push(config.modules[i].module);\r\n        }\r\n    }\r\n    inquirer.prompt([{\r\n            type: 'checkbox',\r\n            name: 'moduleNames',\r\n            message: '选择要上传的模块             ()',\r\n            choices: moduleNames,\r\n            default: moduleNames\r\n        }], function (answers) {\r\n            moduleNames = answers.moduleNames;\r\n            for (var i = 0, l = moduleNames.length; i < l; i++) {\r\n                for (var j = 0, m = config.modules.length; j < m; j++) {\r\n                    if (moduleNames[i] === config.modules[j].module) {\r\n                        upload_modules.push(config.modules[j]);\r\n                    }\r\n                }\r\n            }\r\n            done();\r\n        }\r\n    );\r\n});\r\n\r\n/*====================================\r\n =            zip Task            =\r\n ====================================*/\r\n\r\n\r\ngulp.task('zip', ['clean_zip', 'get_model'], function (done) {\r\n    for (var i = 0; i < modelFolders.length; i++) {\r\n        var model = modelFolders[i];\r\n        gulp.src(['!**/*.map', './' + directory.dest + '/' + model + '/**'], {base: directory.dest})\r\n            .pipe(zip(model + '.zip'))\r\n            .pipe(gulp.dest('./' + directory.zip));\r\n    }\r\n    done();\r\n});\r\n\r\n\r\n/*====================================\r\n =         login Task            =\r\n ====================================*/\r\n\r\ngulp.task('login', ['select_modules'], function (done) {\r\n    request.post({\r\n        url: config.url + '/knd_xSimple/apply/logins_login.action',\r\n        formData: {\r\n            'username': config.loginfo.username,\r\n            'pas': config.loginfo.passworld,\r\n            'autologin': ''\r\n        }\r\n    }, function optionalCallback(err, httpResponse, body) {\r\n        if (err) {\r\n            return console.error('failed:', err);\r\n        }\r\n        if (!err && httpResponse.statusCode == 200) {\r\n            JSESSIONID = httpResponse.headers['set-cookie'][1].split(';')[0];\r\n            done();\r\n        }\r\n\r\n    });\r\n});\r\n\r\n/*====================================\r\n =         upload zip Task            =\r\n ====================================*/\r\n\r\ngulp.task('upload', ['getFid'], function (done) {\r\n    var cookie = request.cookie(JSESSIONID),\r\n        j = request.jar(),\r\n        count = 0;\r\n    j.setCookie(cookie, config.url);\r\n    for (var i = 0, l = upload_modules.length; i < l; i++) {\r\n        var module = upload_modules[i].module,\r\n            name = upload_modules[i].name;\r\n        var formData = {\r\n            clientVersion: \"\",\r\n            fid: data[name],\r\n            interfaceUrl: \"\",\r\n            remark: \"\",\r\n            workStatus: \"usable\",\r\n            zipUrl: \"\",\r\n            uploadFile: {\r\n                value: fs.createReadStream(__dirname + '/' + directory.zip + '/' + module + '.zip'),\r\n                options: {\r\n                    filename: module + '.zip',\r\n                    contentType: 'application/x-zip-compressed'\r\n                }\r\n            }\r\n        };\r\n        request.post({\r\n            url: config.url + '/knd_xSimple/apply/funVer_save.action',\r\n            formData: formData,\r\n            jar: j\r\n        }, function optionalCallback(err, httpResponse, body) {\r\n            if (err) {\r\n                return console.error('failed:', err);\r\n            }\r\n            console.log('successful!' + module + 'has upload');\r\n\r\n            count += 1;\r\n            if (count === l) {\r\n                done();\r\n            }\r\n        });\r\n    }\r\n});\r\n\r\ngulp.task('getFid', ['login'], function (done) {\r\n    var cookie = request.cookie(JSESSIONID),\r\n        j = request.jar(),\r\n        count = 0;\r\n    j.setCookie(cookie, config.url);\r\n    request.post({\r\n        url: config.url + '/knd_xSimple/apply/function_list.action',\r\n        jar: j\r\n    }, function optionalCallback(err, httpResponse, body) {\r\n        if (err) {\r\n            return console.error('failed:', err);\r\n        }\r\n        if (!err && httpResponse.statusCode == 200) {\r\n            body = JSON.parse(body);\r\n            for (var i = 0, l = body.aaData.length; i < l; i++) {\r\n                data[body.aaData[i].mtitle] = body.aaData[i].id;\r\n            }\r\n            done();\r\n        }\r\n    });\r\n});\r\n\r\n"}